<?php

/**
 * Implements hook_field_formatter().
 */
function imagezoom_field_formatter_info() {
  $formatters = array(
    'imagezoom' => array(
      'label' => t('Image Zoom'),
      'field types' => array('image'),
      'settings' => array(
        'imagezoom_display_style' => '',
        'imagezoom_zoom_style' => '',
      ),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function imagezoom_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE);
  $element['imagezoom_display_style'] = array(
    '#title' => t('Display image style'),
    '#type' => 'select',
    '#default_value' => $settings['imagezoom_display_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  $element['imagezoom_zoom_style'] = array(
    '#title' => t('Zoomed image style'),
    '#type' => 'select',
    '#default_value' => $settings['imagezoom_zoom_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function imagezoom_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['imagezoom_display_style']])) {
    $summary[] = t('Display image style: @style', array('@style' => $image_styles[$settings['imagezoom_display_style']]));
  }
  else {
    $summary[] = t('Display image style: original');
  }

  if (isset($image_styles[$settings['imagezoom_zoom_style']])) {
    $summary[] = t('Zoomed image style: @style', array('@style' => $image_styles[$settings['imagezoom_zoom_style']]));
  }
  else {
    $summary[] = t('Zoomed image style: original');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function imagezoom_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $display_style = $display['settings']['imagezoom_display_style'];
  $zoom_style = $display['settings']['imagezoom_zoom_style'];

  $element = array();
  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'imagezoom_image',
      '#item' => $item,
      '#display_style' => $display_style,
      '#zoom_style' => $zoom_style,
    );
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function imagezoom_theme() {
  return array(
    'imagezoom_image' => array(
      'variables' => array(
        'item' => NULL,
        'display_style' => NULL,
        'zoom_style' => NULL,
      ),
    ),
  );
}

/**
 * Theme function for imagezoom_image
 */
function theme_imagezoom_image($variables) {
  drupal_add_js(drupal_get_path('module', 'imagezoom') . '/js/imagezoom.js');
  drupal_add_css(drupal_get_path('module', 'imagezoom') . '/css/imagezoom.css');

  $image = array(
    'path' => $variables['item']['uri'],
    'alt' => $variables['item']['alt'],
  );

  // Do not output an empty 'title' attribute.
  if (drupal_strlen($variables['item']['title']) > 0) {
    $image['title'] = $variables['item']['title'];
  }

  $display_img = '';
  if ($variables['display_style']) {
    $image['style_name'] = $variables['display_style'];
    $display_img = theme('image_style', $image);
  }
  else {
    $display_img = theme('image', $image);
  }

  $zoom_img = '';
  if ($variables['zoom_style']) {
    $image['style_name'] = $variables['zoom_style'];
    $zoom_img = image_style_url($variables['zoom_style'], $variables['item']['uri']);
  }
  else {
    $zoom_img = file_create_url($image['path']);
  }

  return l($display_img, $zoom_img, array('html' => TRUE, 'attributes' => array('class' => 'imagezoom')));
}
