<?php

/**
 * @file
 * Provides an Image Zoom field formatter for Image fields.
 *
 * This module provides a field formatter that allows users to specify an image
 * style to display, and another image style to use as the zoomed version of the
 * image. Hovering the mouse over the image will display the zoomed version,
 * which shifts with mouse movement.
 */

/**
 * Implements hook_field_formatter().
 */
function imagezoom_field_formatter_info() {
  $formatters = array(
    'imagezoom' => array(
      'label' => t('Image Zoom'),
      'field types' => array('image'),
      'settings' => array(
        'imagezoom_display_style' => '',
        'imagezoom_zoom_style' => '',
        'imagezoom_thumb_style' => '',
      ),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function imagezoom_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE);
  $element['imagezoom_display_style'] = array(
    '#type' => 'select',
    '#title' => t('Display image style'),
    '#options' => $image_styles,
    '#empty_option' => t('None (original image)'),
    '#default_value' => $settings['imagezoom_display_style'],
  );

  $element['imagezoom_zoom_style'] = array(
    '#type' => 'select',
    '#title' => t('Zoomed image style'),
    '#options' => $image_styles,
    '#empty_option' => t('None (original image)'),
    '#default_value' => $settings['imagezoom_zoom_style'],
  );

  $element['imagezoom_thumb_style'] = array(
    '#type' => 'select',
    '#title' => t('Thumbnail image style'),
    '#options' => $image_styles,
    '#empty_option' => t('None (original image)'),
    '#default_value' => $settings['imagezoom_thumb_style'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function imagezoom_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that define
  // their styles in code.
  $summary[] = t('Display image style: @style', array(
    '@style' => isset($image_styles[$settings['imagezoom_display_style']]) ?
    $image_styles[$settings['imagezoom_display_style']] : 'original',
  ));
  $summary[] = t('Zoomed image style: @style', array(
    '@style' => isset($image_styles[$settings['imagezoom_zoom_style']]) ?
    $image_styles[$settings['imagezoom_zoom_style']] : 'original',
  ));
  $summary[] = t('Thumbnail image style: @style', array(
    '@style' => isset($image_styles[$settings['imagezoom_thumb_style']]) ?
    $image_styles[$settings['imagezoom_thumb_style']] : 'original',
  ));

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function imagezoom_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $display_style = $display['settings']['imagezoom_display_style'];
  $zoom_style = $display['settings']['imagezoom_zoom_style'];
  $thumb_style = isset($display['settings']['imagezoom_thumb_style']) ?
    $display['settings']['imagezoom_thumb_style'] : NULL;

  $element = array();
  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'imagezoom_image',
      '#item' => $item,
      '#display_style' => $display_style,
      '#zoom_style' => $zoom_style,
    );
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function imagezoom_theme() {
  return array(
    'imagezoom_image' => array(
      'variables' => array(
        'item' => NULL,
        'display_style' => NULL,
        'zoom_style' => NULL,
      ),
    ),
  );
}

/**
 * Returns the HTML code for an image with a zoomed version on mouseover.
 */
function theme_imagezoom_image($variables) {
  drupal_add_js(drupal_get_path('module', 'imagezoom') . '/js/imagezoom.min.js');
  drupal_add_css(drupal_get_path('module', 'imagezoom') . '/css/imagezoom.css');

  $item = $variables['item'];

  $image = array(
    'path' => $item['uri'],
    'alt' => $item['alt'],
  );

  // Do not output an empty 'title' attribute.
  if (drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }

  $display_img = '';
  if ($variables['display_style']) {
    $image['style_name'] = $variables['display_style'];
    $display_img = theme('image_style', $image);
  }
  else {
    $display_img = theme('image', $image);
  }

  $zoom_img = '';
  if ($variables['zoom_style']) {
    $image['style_name'] = $variables['zoom_style'];
    $zoom_img = image_style_url($variables['zoom_style'], $item['uri']);
  }
  else {
    $zoom_img = file_create_url($image['path']);
  }

  $options = array(
    'html' => TRUE,
    'attributes' => array(
      'class' => array('imagezoom'),
      'rel' => 'nofollow',
    ),
  );

  if (isset($image['title'])) {
    $options['attributes']['title'] = $image['title'];
  }

  $output = l($display_img, $zoom_img, $options);

  return $output;
}
